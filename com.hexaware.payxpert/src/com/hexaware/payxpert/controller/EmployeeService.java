// EmployeeService.java

package com.hexaware.payxpert.controller;

import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Scanner;

import com.hexaware.payxpert.dao.EmployeeDao;
import com.hexaware.payxpert.model.Employee;

public class EmployeeService implements IEmployeeService {
    EmployeeDao dao = new EmployeeDao();

  
    @Override
    public void addEmployee() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter employee First Name: ");
        String firstName = scanner.nextLine();
        ValidationService.validateAlphabets(firstName);

        System.out.println("Enter employee Last Name: ");
        String lastName = scanner.nextLine();
        ValidationService.validateAlphabets(lastName);

        System.out.println("Enter employee Date of Birth (yyyy-mm-dd): ");
        Date dateOfBirth = parseDate(scanner.next());

        System.out.println("Enter employee Gender: ");
        String gender = scanner.next();

        System.out.println("Enter employee Email: ");
        String email = scanner.next();

        System.out.println("Enter employee Phone Number: (xxx-xxx-xxxx) ");
        String phoneNumber = scanner.next();
        ValidationService.validatePhoneNumber(phoneNumber);


        System.out.println("Enter employee address: ");
        String address = scanner.next();
        
        System.out.println("Enter employee position: ");
        String position = scanner.next();
        
        System.out.println("Enter employee Joining Date (yyyy-mm-dd): ");
        Date joiningDate = parseDate(scanner.next());


        System.out.println("Is there a termination date? (true/false): ");
        String hasTerminationDateStr = scanner.next();

        // Use a ternary operator to conditionally set terminationDate based on user input
        Date terminationDate = "false".equalsIgnoreCase(hasTerminationDateStr)
                ? null
                : parseDate(scanner.next());

        // Parameters passed into the employee constructor if all the validation is true
        Employee newEmployee = new Employee(
                0, // employeeID is set to 0, as it will be generated by the database
                firstName, lastName, dateOfBirth, gender,
                email, phoneNumber, address, position, joiningDate,
                terminationDate);

        dao.createEmployee(newEmployee);
        System.out.println("Employee added Successfully !!!");
    }

    private Date parseDate(String dateStr) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            return new Date(dateFormat.parse(dateStr).getTime());
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please enter in the format yyyy-mm-dd.");
            return null;
        }
    }

    @Override
    public void getEmployeeById(int employeeId) {
        Employee employee = dao.getEmployeeById(employeeId);

        if (employee != null) {
            System.out.println("Employee Details:");
            System.out.println(employee);
        } else {
            System.out.println("Employee not found with ID: " + employeeId);
        }
    }

    @Override
    public void getAllEmployees() {
        List<Employee> employees = dao.getAllEmployees();
        for (Employee employee : employees) {
            System.out.println(employee);
        }
    }
    public void updateEmployee(int employeeId) {
        // Assuming you have a method to get the existing employee by ID
        Employee existingEmployee = dao.getEmployeeById(employeeId);

        if (existingEmployee != null) {
            // Assuming there is a method to read and create updated EmployeeData
            Employee updatedEmployeeData = readUpdatedEmployeeData();

            // Assuming you have a method to convert EmployeeData to Employee
            Employee updatedEmployee = convertToEmployee(updatedEmployeeData);

            // Check if the converted Employee is not null before updating
            if (updatedEmployee != null) {
                updatedEmployee.setEmployeeID(employeeId); // Set the employeeId
                dao.updateEmployee(updatedEmployee);
                System.out.println("Employee updated successfully!");
            } else {
                System.out.println("Failed to update employee. Invalid data.");
            }
        } else {
            System.out.println("Employee with ID " + employeeId + " not found.");
        }
    }

    private Employee readUpdatedEmployeeData() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter updated employee First Name: ");
        String firstName = scanner.nextLine();
        System.out.println("Enter updated employee Last Name: ");
        String lastName = scanner.nextLine();
        System.out.println("Enter updated employee Date of Birth (yyyy-mm-dd): ");
        Date dateOfBirth = parseDate(scanner.next());
        System.out.println("Enter updated employee Gender: ");
        String gender = scanner.next();
        System.out.println("Enter updated employee Email: ");
        String email = scanner.next();
        System.out.println("Enter updated employee Phone Number: ");
        String phoneNumber = scanner.next();
        System.out.println("Enter updated employee Address: ");
        String address = scanner.next();
        System.out.println("Enter updated employee Position: ");
        String position = scanner.next();
        System.out.println("Enter updated employee Joining Date (yyyy-mm-dd): ");
        Date joiningDate = parseDate(scanner.next());
        System.out.println("Is there an updated termination date? (true/false): ");
        String hasTerminationDateStr = scanner.next();

        // Use a ternary operator to conditionally set terminationDate based on user input
        Date terminationDate = "false".equalsIgnoreCase(hasTerminationDateStr)
                ? null
                : parseDate(scanner.next());

        return new Employee(0, firstName, lastName, dateOfBirth, gender, email, phoneNumber, address, position,
                joiningDate, terminationDate);
    }
    
    private Employee convertToEmployee(Employee employeeData) {
        Employee employee = new Employee();
        employee.setFirstName(employeeData.getFirstName());
        employee.setLastName(employeeData.getLastName());
        employee.setDateOfBirth(employeeData.getDateOfBirth());
        employee.setGender(employeeData.getGender());
        employee.setEmail(employeeData.getEmail());
        employee.setPhoneNumber(employeeData.getPhoneNumber());
        employee.setAddress(employeeData.getAddress());
        employee.setPosition(employeeData.getPosition());
        employee.setJoiningDate(employeeData.getJoiningDate());
        employee.setTerminationDate(employeeData.getTerminationDate());

 

        return employee;
    }

   
    @Override
    public void removeEmployee(int employeeId) {
        try {
            // Assuming you have a method to get the existing employee by ID
            Employee existingEmployee = dao.getEmployeeById(employeeId);

            if (existingEmployee != null) {
                // Remove the employee from the database
                dao.removeEmployee(existingEmployee);
                System.out.println("Employee removed successfully!");
            } else {
                System.out.println("Employee with ID " + employeeId + " not found.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }



	@Override
	public Employee readEmployeeData(Scanner scanner) {
		// TODO Auto-generated method stub
		return null;
	}
}
